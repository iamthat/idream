{"name":"new look ","tagline":"new look the real look","body":"idream\r\n======\r\n\r\nnew look the real look\r\n Eclipse Project Release Notes\r\n\r\nRelease 4.4.0\r\nLast revised June 5, 2014\r\n\r\nThis software is OSI Certified Open Source Software.\r\nOSI Certified is a certification mark of the Open Source Initiative. \r\n\r\n1. Target Operating Environments\r\n2. Compatibility with Previous Releases\r\n3. Known Issues\r\n4. Running Eclipse\r\n5. Upgrading a Workspace from a Previous Release\r\n6. Interoperability with Previous Releases\r\n1. Target Operating Environments\r\n\r\nIn order to remain current, each Eclipse Project release targets reasonably current operating environments.\r\n\r\nMost of the Eclipse SDK is \"pure\" Java code and has no direct dependence on the underlying operating system. The chief dependence is therefore on the Java Platform itself. Portions are targeted to specific classes of operating environments, requiring their source code to only reference facilities available in particular class libraries (e.g. J2ME Foundation 1.1, J2SE 1.4, Java 5, etc).\r\n\r\nIn general, the 4.4 release of the Eclipse Project is developed on a mix of Java SE 6 and Java SE 7 VMs. As such, the Eclipse SDK as a whole is targeted at all modern, desktop Java VMs. Most functionality is available for Java SE 6 level development everywhere, and extended development capabilities are made available on the VMs that support them.\r\n\r\nAppendix 1 contains a table that indicates the class library level required for each bundle.\r\n\r\nThere are many different implementations of the Java Platform running atop a variety of operating systems. We focus our testing on a handful of popular combinations of operating system and Java Platform; these are our reference platforms. Eclipse undoubtedly runs fine in many operating environments beyond the reference platforms we test. However, since we do not systematically test them we cannot vouch for them. Problems encountered when running Eclipse on a non-reference platform that cannot be recreated on any reference platform will be given lower priority than problems with running Eclipse on a reference platform.\r\n\r\nEclipse 4.4 is tested and validated on the following reference platforms (this list is updated over the course of the release cycle):\r\n\r\nOperating System\tVersion\tHardware\tJRE\tWindowing System\r\nWindows\t7\r\n8\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\r\nIBM Java 7 SR 7\r\nIBM Java 6 SR16\tWin32\r\nx86 64-bit\r\nRed Hat Enterprise Linux\t6\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\r\nIBM Java 7 SR 7\r\nIBM Java 6 SR16\r\nOpen JDK 7u40\tGTK+ 2\r\nx86 64-bit\r\nPower 32-bit\tIBM Java 7 SR7\r\nIBM Java 6 SR16\r\nPower 64-bit\r\nSUSE Linux Enterprise Server\t11\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\r\nIBM Java 7 SR7\r\nIBM Java 6 SR16\tGTK+ 2\r\nx86 64-bit\r\nPower 32-bit\tIBM Java 7 SR7\r\nIBM Java 6 SR16\r\nPower 64-bit\r\nUbuntu Long Term Support\t12.04\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\r\nIBM Java 7 SR7\r\nIBM Java 6 SR16\tGTK+ 3\r\nx86 64-bit\r\n14.04\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\r\nIBM Java 7 SR7\r\nIBM Java 6 SR16\tGTK+ 2\r\nx86 64-bit\r\nOracle Solaris\t11\tx86 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\tGTK+ 2\r\nSPARC 32-bit\r\nHP-UX\t11i v3\tia64 64-bit\tHP-UX Java 6u20\tGTK+ 2\r\nIBM AIX\t7.1\tPower 32-bit\tIBM Java 7 SR7\r\nIBM Java 6 SR16\tGTK+ 2\r\nPower 64-bit\r\nApple Mac OS X\t10.9\tUniversal 32-bit\t Oracle Java 8u5\r\nOracle Java 7u55\tCocoa\r\nx86 64-bit\r\nAs stated above, we expect that Eclipse works fine on other current Java VM and OS versions but we cannot flag these as reference platforms without significant community support for testing them.\r\n\r\nThe Eclipse SDK is designed as the basis for internationalized products. The user interface elements provided by the Eclipse SDK components, including dialogs and error messages, are externalized. The English strings are provided as the default resource bundles.\r\n\r\nLatin-1, DBCS, and BiDi locales are supported by the Eclipse SDK on all reference platforms.\r\n\r\nThe Eclipse SDK supports GB 18030 (level 1), the Chinese code page standard, on Windows, Linux and the Macintosh.\r\n\r\nGerman and Japanese locales are tested.\r\n\r\n2. Compatibility with Previous Releases\r\n\r\nCompatibility of Release 4.4 with 4.3\r\n\r\nEclipse 4.4 is compatible with Eclipse 4.3 (and all earlier 3.x versions).\r\n\r\nAPI Contract Compatibility: Eclipse SDK 4.4 is upwards contract-compatible with Eclipse SDK 4.3 except in those areas noted in the Eclipse 4.4 Plug-in Migration Guide . Programs that use affected APIs and extension points will need to be ported to Eclipse SDK 4.4 APIs. Downward contract compatibility is not supported. There is no guarantee that compliance with Eclipse SDK 4.4 APIs would ensure compliance with Eclipse SDK 4.3 APIs. Refer to Evolving Java-based APIs for a discussion of the kinds of API changes that maintain contract compatibility.\r\n\r\nBinary (plug-in) Compatibility: Eclipse SDK 4.4 is upwards binary-compatible with Eclipse SDK 4.3 except in those areas noted in the Eclipse 4.4 Plug-in Migration Guide . Downward plug-in compatibility is not supported. Plug-ins for Eclipse SDK 4.4 will not be usable in Eclipse SDK 4.3. Refer to Evolving Java-based APIs for a discussion of the kinds of API changes that maintain binary compatibility.\r\n\r\nSource Compatibility: Eclipse SDK 4.4 is upwards source-compatible with Eclipse SDK 4.3 except in the areas noted in the Eclipse 4.4 Plug-in Migration Guide . This means that source files written to use Eclipse SDK 4.3 APIs might successfully compile and run against Eclipse SDK 4.4 APIs, although this is not guaranteed. Downward source compatibility is not supported. If source files use new Eclipse SDK APIs, they will not be usable with an earlier version of the Eclipse SDK.\r\n\r\nWorkspace Compatibility: Eclipse SDK 4.4 is upwards workspace-compatible with earlier 3.x and 4.x versions of the Eclipse SDK unless noted. This means that workspaces and projects created with Eclipse SDK 4.3, 4.2, .. 3.0 can be successfully opened by Eclipse SDK 4.4 and upgraded to a 4.4 workspace. This includes both hidden metadata, which is localized to a particular workspace, as well as metadata files found within a workspace project (e.g., the .project file), which may propagate between workspaces via file copying or team repositories. Individual plug-ins developed for Eclipse SDK 4.4 should provide similar upwards compatibility for their hidden and visible workspace metadata created by earlier versions; 4.4 plug-in developers are responsible for ensuring that their plug-ins recognize metadata from earlier versions and process it appropriately. User interface session state may be discarded when a workspace is upgraded. Downward workspace compatibility is not supported. A workspace created (or opened) by a product based on Eclipse 4.4 will be unusable with a product based on an earlier version of Eclipse. Visible metadata files created (or overwritten) by Eclipse 4.4 will generally be unusable with earlier versions of Eclipse.\r\n\r\nNon-compliant usage of API's: All non-API methods and classes, and certainly everything in a package with \"internal\" in its name or x-internal in the bundle manifest entry, are considered implementation details which may vary between operating environment and are subject to change without notice. Client plug-ins that directly depend on anything other than what is specified in the Eclipse SDK API are inherently unsupportable and receive no guarantees about compatibility within a single release much less with earlier releases. Refer to How to Use the Eclipse API for information about how to write compliant plug-ins.\r\n\r\n3. Known Issues\r\n\r\n3.1 General problems\r\n     3.1.1 Startup\r\n     3.1.2 GCJ\r\n     3.1.3 64-bit Java HotSpot(TM) VM\r\n3.2 Platform\r\n     3.2.1 Core\r\n     3.2.2 Ant\r\n     3.2.3 User Assistance\r\n     3.2.4 UI\r\n     3.2.5 Text\r\n     3.2.6 SWT\r\n     3.2.7 Team and CVS\r\n     3.2.8 Install/Update\r\n     3.2.9 Debug\r\n     3.2.10 Compare\r\n3.3 Java development tools (JDT)\r\n3.4 Plug-in Development Environment (PDE)\r\nNote: Bug numbers refer to the Eclipse project bug database at http://bugs.eclipse.org/bugs/\r\n\r\n3.1 General problems\r\n\r\n3.1.1 General - Startup\r\n\r\nInstallation/Configuration issues that can cause Eclipse to fail start\r\n\r\nHere are some common problems that can cause Eclipse not to start:\r\n\r\nAs shown above, Eclipse 4.4 requires at least a Java SE 6. Perhaps an older version of the VM is being found in your path. To explicitly specify which VM to run with, use the Eclipse -vm command-line argument. (See also the Running Eclipse section below.)\r\nRunning Eclipse on Gentoo Linux may result in the following error message:\r\n* run-java-tool is not available for sun-jdk-1.6 on i686\r\n* IMPORTANT: some Java tools are not available on some VMs on some architectures\r\nIf this occurs, start Eclipse by specifying a -vm argument, either specify the path to a java vm or use: eclipse -vm `java-config --java` (bug 176021)\r\nEclipse must be installed to a clean directory and not installed over top of a previous installation. If you have done this then please re-install to a new directory. If your workspace is in a child directory of your old installation directory, then see the instructions below on \"Upgrading Workspace from a Previous Release\".\r\nJava sometimes has difficulty detecting whether a file system is writable. In particular, the method java.io.File.canWrite() appears to return true in unexpected cases (e.g., using Windows drive sharing where the share is a read-only Samba drive). The Eclipse runtime generally needs a writable configuration area and as a result of this problem, may erroneously detect the current configuration location as writable. The net result is that Eclipse will fail to start and depending on the circumstances, may fail to write a log file with any details. To work around this, we suggest users experiencing this problem set their configuration area explicitly using the -configuration command line argument. (bug 67719)\r\nInvalid characters in install directory prevents Eclipse from starting\r\n\r\nEclipse will fail to launch if installed in a directory whose path contains certain invalid characters, including :%#<>\"!. The workaround is to install Eclipse in a directory whose path does not contain invalid characters. (bugs 3109 and 17281)\r\n\r\nHanging during class loading when out of permanent generation memory\r\n\r\nThe Oracle JVM may hang indefinitely during class loading if it runs out of permanent generation memory. This will cause CPU usage to stay at 100% until the process is ended. See the section Running Eclipse for details on addressing this VM problem.\r\n\r\n3.1.2 General - GCJ\r\n\r\nGCJ is an effort by the GCC team to provide an open source Java compiler and runtime environment to interpret Java bytecode. Unfortunately, the GCJ runtime environment is not an environment that is often tested on by Eclipse developers.\r\n\r\nThe most common problems surrounding GCJ are:\r\n\r\nEclipse does not start at all\r\nEclipse throws a 'java.lang.ClassNotFoundException: org.eclipse.core.runtime.Plugin' that can be found in the logs (located in workspace/.metadata/.log)\r\nThe workspace's log file is a good place to check to identify whether GCJ is being used or not. Every Eclipse log session is prepended with information about the runtime environment that was used to run Eclipse. The log may include something like the following:\r\n\r\njava.fullversion=GNU libgcj 4.2.1 (Debian 4.2.1-5)\r\nIf Eclipse does start, one can check which runtime environment is being used to run Eclipse by going to Help > About Eclipse SDK > Installation Details > Configuration. The About dialog itself can also provide other information, the build identifier can be of particular interest as it is tagged by some distributions. This allows the user to identify whether Eclipse was downloaded through the distribution's package management system or directly from the eclipse.org web site.\r\n\r\nEg: Build id: M20070212-1330 (Ubuntu version: 3.2.2-0ubuntu3)\r\nThe two most common workarounds are:\r\n\r\ndownload the Eclipse binary from eclipse.org directly\r\nrun Eclipse using an alternate Java runtime environment\r\nTo download Eclipse, try one of the links below:\r\n\r\nhttp://www.eclipse.org/downloads/\r\nhttp://download.eclipse.org/eclipse/downloads/\r\nIt is imperative that 64-bit builds are downloaded and used if a 64-bit Java runtime environment has been installed. Below are two sample tarball names of version 4.4 of the Eclipse SDK packaged for 32-bit and 64-bit processors.\r\neclipse-SDK-4.4-linux-gtk.tar.gz (32-bit)\r\neclipse-SDK-4.4-linux-gtk-x86_64.tar.gz (64-bit)\r\nTo run Eclipse with an alternate Java runtime environment, the path to the Java virtual machine's binary must be identified. With an Eclipse installation from the distribution, altering the $PATH variable to include the path to the alternate Java runtime environment is often not enough as the Eclipse that Linux distributions package often performs a scan internally to pick up GCJ by itself whilst ignoring what's on the $PATH. An example of the terminal's output is shown below:\r\n\r\nsearching for compatible vm...\r\ntesting /usr/lib/jvm/java-7-icedtea...not found\r\ntesting /usr/lib/jvm/java-gcj...found\r\nOnce the path to the virtual machine's binary has been identified, try running Eclipse with the following command:\r\n\r\n./eclipse -vm /path/to/jre/bin/java\r\nFor an actual example, it might look something like the following:\r\n\r\n./eclipse -vm /usr/lib/jvm/sun-java-6/bin/java\r\n./eclipse -vm /opt/sun-jdk-1.6.0.02/bin/java\r\nIf this seems to solve the problem, it is likely that the problem really was related to the use of GCJ as the Java runtime for running Eclipse. The eclipse.ini file located within Eclipse's folder can be altered to automatically pass this argument to Eclipse at startup. An example of its content is presented below:\r\n\r\n-showsplash\r\norg.eclipse.platform\r\n--launcher.XXMaxPermSize\r\n256m\r\n-vm\r\n/opt/sun-jdk-1.6.0.02/bin/java\r\n-vmargs\r\n-Xms40m\r\n-Xmx512m\r\nNote that every argument must be on its own line. More information about the eclipse.ini file can be found at http://wiki.eclipse.org/Eclipse.ini.\r\n\r\nIf problems persists after downloading an installation of Eclipse from eclipse.org and using a supported Java runtime environment (a list of which may be found above), you can seek further assistance through the newsgroups, the IRC channel, and/or bugzilla.\r\n\r\n3.1.3 General - 64-bit Java HotSpot(TM) VM\r\n\r\nThere is a known issue with the Java HotSpot(TM) 1.6.0 VM compiler which causes eclipse to crash (see Sun bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6614100, and Eclipse bug 214092). The crash usually occurs within a VM CompilerThread when attempting to compile the method org.eclipse.core.internal.dtree.DataTreeNode.forwardDeltaWith.\r\n\r\nThis problem has been addressed in Sun Java 6 update 11, so the simplest resolution is to obtain the latest JRE release for your platform. To work around the issue you can exclude the method org.eclipse.core.internal.dtree.DataTreeNode.forwardDeltaWith from being compiled with the following VM argument:\r\n\r\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\r\nThis VM argument can be placed in the eclipse.ini file after the -vmargs line like the following:\r\n\r\n-startup\r\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090306-1900\r\n--launcher.library\r\nplugins/org.eclipse.equinox.launcher_1.0.200.v20090429-1630.jar\r\n-showsplash\r\norg.eclipse.platform\r\n--launcher.XXMaxPermSize\r\n256m\r\n-vmargs\r\n-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith\r\n-Xms40m\r\n-Xmx256m\r\nThere have been reports of other classes that cause the compiler to crash. If all else fails you can disable the compiler with the VM arg \"-Xint\".\r\n\r\n3.2 Platform\r\n\r\n3.2.1 Platform - Core\r\n\r\nInstalling plug-ins by unzipping them into the plugins directory\r\n\r\nNew plug-ins can be installed into the system by unzipping them into the plugins directory. However this is not recommended, and the dropins directory should be used for this purpose instead. Note that unzipping a different version of a plug-in that is already installed will have no effect. To change the version of a plug-in installed in your system, you need to either perform an update, or install a feature patch.\r\n\r\nNo branding with old config.ini\r\n\r\nIf you have an old config.ini file and use it with a new Eclipse build, you may not get the correct product branding. This is because the id of the standard Eclipse product changed. Users in shared install scenarios may end up in this situation as previous builds of Eclipse automatically generated config.ini files in some cases. The work around is either to delete the local config.ini or update the eclipse.product line to read eclipse.product=org.eclipse.platform.ide.\r\n\r\nProblems with classloaders in created threads\r\n\r\nThere is a known issue with trying to load classes from a newly-created thread using a class loader different from the plug-in class loader. The result will be a ClassNotFoundException. As a workaround, do the following:\r\n\r\nCreate a thread in which to run your code.\r\nSend yourThread.setContextClassLoader(yourClassLoader); // you can find your classloader by grabbing a class it loaded (YourPluginClass.class.getClassLoader())\r\nRun your code in the newly created thread.\r\nIf you set the context class loader for the current thread, you are competing with other users of the thread (all of Eclipse), so the results will be unpredictable. However, there should be no problem in practice provided you reset the context class loader back to its original value when your use in the current thread is complete. (bug 8907)\r\n\r\nDeadlock creating executable extension in Plugin.startup\r\n\r\nIf Plugin.startup code is too complex and performs tasks such as creating an executable extension, a deadlock situation can be created. Only simple bookkeeping tasks should be performed in Plugin.startup code. (bug 5875)\r\n\r\nPotential Problems Converting Plug-in Manifests\r\n\r\nIf your plug-in ships with a plug-in manifest and not an OSGi bundle manifest, is shipped as a JAR file, and contains a nested JAR file then there may be problems in the automatic generation of the bundle manifest file. The packages defined in the nested JAR may not be exported correctly in the Export-packages bundle manifest header. To work around this you should ship your plug-in with a bundle manifest. (bug 97689)\r\n\r\nLocation for Debug Options File on Mac OS\r\n\r\nIf you are running in debug mode on Mac OS, the default location for the .options file is inside the application bundle in the Eclipse.app/Contents/MacOS directory (like the eclipse.ini). (bug 88782)\r\n\r\nIssues with JNI that use FindClass\r\n\r\nThere may be issues when using a JNI implementation that uses FindClass in a function where the JNIEnv pointer is not available, such as in a C callback (bug 125250). The reason is that FindClass, in this case, uses the application class loader to find the class. If the desired class is in the classpath used for the application classloader (e.g. defined by the VM argument -cp <classpath>), as it would typically be in a stand-alone application, there is no problem. However, under Eclipse, the application classloader does not have access to classes contained in plug-ins. Eclipse uses its own class loader to find classes contained in plug-ins.\r\n\r\nThe proper plug-in class loader is used by FindClass in JNI functions which are passed the JNIEnv pointer, but not when you have to use AttachCurrentThread to get the JNIEnv pointer. In this case the application classloader is used.\r\n\r\nFor example, the following will fail because AttachCurrentThread is used to get the JNIEnv pointer:\r\n\r\nstatic JavaVM* jvm;  // Global variable\r\n\r\nvoid myCallback(void) {\r\n    JNIEnv* env;\r\n    jvm->AttachCurrentThread((void**)&env, NULL);\r\n    // Fails if some/class is not in the application classloader:\r\n    jclass cls = env->FindClass(\"some/class\");\r\n    jmethodID methodID = env->GetMethodID(cls, \"methodName\",\r\n      \"(Ljava/lang/String;)V or whatever signature\");\r\n    env->CallVoidMethod(callback, methodID, ...);\r\n    jvm->DetachCurrentThread();\r\n  }\r\n}\r\nA solution is to cache the method ID, for example:\r\n\r\nstatic jmethodID mid;  // Global variable\r\n\r\nJNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {\r\n...\r\n  // Store the JavaVM pointer\r\n    jvm = vm;\r\n\r\n  // Find the class and store the method ID\r\n  // Will use the class loader that loaded the JNI library\r\n    jclass cls = env->FindClass(className\"some/class\");\r\n    if(!cls) goto ERR;\r\n\r\n    mid = env->GetMethodID(cls, \"methodName\",\r\n      \"(Ljava/lang/String;)V or whatever signature\");\r\n    if(!mid) goto ERR;\r\n...\r\n}\r\n\r\nvoid myCallback(void) {\r\n    JNIEnv* env;\r\n    jvm->AttachCurrentThread((void**)&env, NULL);\r\n    env->CallVoidMethod(callback, mid, ...);\r\n     // Handle error ...\r\n    jvm->DetachCurrentThread();\r\n  }\r\n}\r\n3.2.2 Platform - Ant\r\n\r\nCustom Ant tasks and Ant types must be separate from plug-in library JARs\r\n\r\nIncluding the class files for custom Ant tasks or Ant types in the regular code JAR for your plug-in causes problems. These class files must be provided in a separate JAR that is contributed to the org.eclipse.ant.core.antTasks or antTypes extension point (and not declared as a library in the plug-in's manifest). This ensures that the Ant tasks and types are loaded by the special Ant class loader and not by a plug-in classloader. (bug 34466).\r\n\r\nConcurrent Ant builds not supported\r\n\r\nEclipse can run Ant in the same JVM as the rest of Eclipse. Several aspects of Ant and its use of global Java resources (such as System.out and System.err), make it unsafe to run more than one Ant build concurrently in the same JVM. (bug 24129).\r\n\r\nXDoclet support from within Eclipse\r\n\r\nSince there are differences when running Ant from the commandline and within Eclipse, some extra steps may be needed to have XDoclet support function correctly within Eclipse. Problems may occur creating XDoclet subtasks. The workarounds and full discussion can be found in bug report. (bug 37070)\r\n\r\nAnt Editor code completion based on Ant 1.6.x\r\n\r\nCode completion provided by the Ant editor does not respect the user-specified version of org.eclipse.ant.core plug-in or ANT_HOME. Code completion proposals are mostly based on Ant 1.6.x with some updates to Ant 1.8.3 (bug bug 193046)\r\n\r\nSetting build loggers not supported when debugging Ant builds\r\n\r\nWhen debugging Ant builds within Eclipse, setting -logger as a program argument will be ignored.\r\n\r\nRenaming an External Tool builder set to run during auto-build will cause errors\r\n\r\nIf you rename an existing external tool builder that is configured to run during auto-builds, you will get the following error: Errors during build. Errors running builder \"Integrated External Tool Builder\" on project <PROJECT_NAME>. The builder launch configuration could not be found. The workaround is to first disable the builder for auto-builds and then rename the builder. (bug 118294)\r\n\r\nSlow typing/saving of the Ant editor with imports that define numerous macrodefs\r\n\r\nThe Ant editor is slow on saving with buildfiles that have <import> declarations of buildfiles that have numerous <macrodef>s. See bug 125117 for a possible workaround\r\n\r\nFailure to run Ant builds on non-Windows platforms if Eclipse installed in location with spaces in the path\r\n\r\nDue to a bug in Ant 1.7.0, Ant builds will fail with an IllegalArgumentException if the Eclipse installation is in a location with spaces in the path. Embedded usage of Ant builds, such as plug-in export will also fail. See bug 187993 for possible workarounds\r\n\r\nAnt 1.8.x reports missing libraries as build failures\r\n\r\nIn Ant 1.8.x, if you try to use a task that requires additional libraries and you do not have the libraries on the Ant classpath, the build will now properly report as failed. In previous versions of Ant, the build would still report that it had suceeded even though it actually failed to run any of the tasks from additional bundles. See bug 344518.\r\n\r\nFor more information on tasks that require additional bundles please refer to the Ant 1.8.2 release notes and the Optional Tasks section in the Ant manual.\r\n\r\n3.2.3 Platform - User Assistance\r\n\r\nWelcome page not displayed properly (Linux/Unix)\r\n\r\nThe default Welcome implementation is HTML-based and requires a supported browser in order to work. If no supported browser can be found, Welcome falls back to its Forms-based implementation, which has a different (simpler) appearance. Consult the SWT FAQ for supported browsers and setting up your browser to work with eclipse.\r\n\r\nHelp browser tool bar buttons do not work for some documents\r\n\r\nThe Help browser's Print, Synchronize, and Bookmark buttons do not work for pages that are not actually installed with the product. However, you can always use the print command in the browser's context menu to print the page you're reading. (bug 44216)\r\n\r\nHelp documents not displayed in a browser or very slow document loading (Windows only)\r\n\r\nIf your LAN settings are not properly configured for local host access, your Help browser might open to a blank page or display an HTTP error instead of a help page, or you may experience long delays when loading help documents. Your system administrator can configure your LAN settings so that help documents can be accessed from the local help server.\r\nIn the Control Panel, open Internet Options, select the Connections tab and choose LAN Settings.\r\nIf your host was configured to use DHCP for IP assignment, make sure that the \"Automatically detect settings\" check box is cleared.\r\nIf you use a proxy server, ensure that the \"Bypass proxy server for local addresses\" is selected.\r\nIn \"Advanced\" settings for proxies, add \"127.0.0.1;localhost\" to the \"Exceptions\" if these addresses are not listed.\r\nIf you are using an automatic configuration script for proxy settings, and are not sure that the script is correct, clear the \"Use automatic configuration script\" check box.\r\nWorking disconnected from the network (Windows only)\r\n\r\nIf you are experiencing problems when not connected to the network, you must install the loopback adapter from the Windows installation CD. (bug 831)\r\nUsing Internet Explorer in offline mode (Windows only)\r\n\r\nIf you have been using Internet Explorer in Offline mode, when you access the help system you will get a message indicating that the web page you requested is not available offline or a blank page will display. Click Connect or deselect \"Work Offline\" in the Internet Explorer \"File\" menu to return the system behavior to normal.\r\nHelp topics not highlighted in High Contrast mode (Windows only)\r\n\r\nWindows High Contrast settings are not consistently picked up by Internet Explorer when they are set from the Accessibility Options utility as opposed to when they are set using the predefined schemes. On Windows XP, it is recommended to set High Contrast as follows: Right click the desktop, chose properties, select Windows Classic style from the Windows and buttons drop down on the Appearance tab, and choose your scheme (for example High Contrast Black) from Color Scheme drop down. (bug 28609)\r\n\r\n3.2.4 Platform - UI\r\n\r\nHigh contrast settings\r\n\r\nEclipse was tested for High Contrast using 1152 x 864 resolution in Windows XP High Contrast mode. You can select this mode by selecting Accessibility Options > Display > Use High Contrast from the Windows XP Control Panel menu.\r\n\r\nDirty state not tracked properly for OLE documents (Windows only)\r\n\r\nThe dirty state for an OLE document is not updated properly. This causes Eclipse to prompt to save the contents of the editor when the document is closed, even if the contents have already been saved. (bug 2564)\r\n\r\nOLE document crashes can cause Eclipse to also crash (Windows only)\r\n\r\nIf an OLE document crashes, Eclipse can crash, or the workbench menus can become inconsistent.\r\n\r\nToolbars only containing contributed controls exhibit display errors on Mac/Linux\r\n\r\nCurrently there is no way on the Max or Linux platforms to define the height for controls contributed to toolbars, nor will those platforms respect the size returned by the control's computeSize method. If you encounter this issue there is currently no truly viable workaround. (bug 183003)\r\n\r\nCustomizing menus and toolbars not working reliably\r\n\r\nThe Customize Perspective Dialog can still be used to turn on action sets in the Command Groups Availability tab, but the items contained within the action sets are no longer displayed in the dialog. The Toolbar Visibility and Menu Visibility no longer display the correct information or icons, and will not work correctly. (bug 378849)\r\n\r\nLaunching an inner eclipse can lead to PermGen errors\r\n\r\nOn some Oracle JVMs, launching an inner eclipse during plug-in development can lead to PermGen errors for the inner eclipse. The native launcher checks the JVM and can add -XX:MaxPermSize=256m, but PDE launches simply use java and don't go through the native launchers. The workaround is to add the appropriate JVM arg to your launch config or to the Preferences > Java > Installed JREs. (bug 339763)\r\n\r\nCapabilities and Activities don't affect the menus and toolbars\r\n\r\nCapabilities used to hide GUI elements like menu entries work for commands and individual actionSet entries, but Capabilities have not been fully implemented. (bug 359778)\r\n\r\n3.2.5 Platform - Text\r\n\r\nNone.\r\n3.2.6 Platform - SWT\r\n\r\nEclipse falls back to GTK+ 2 as default on Linux with GTK+ 3 version > 3.8.x\r\n\r\nLinux builds come with GTK+ 3 support enabled by default on GTK+ 3 versions prior to 3.10, versions newer than that will fall back to GTK+ 2.x by default for maximum stability. The GTK+ 3 support can however, still be enabled by using either the environment variable SWT_GTK3 or the launcher parameter --launcher.GTK_version (bug 434619)\r\n\r\nEclipse crashes randomly when using the Webkit based browser on RHEL 6.5\r\n\r\nThe Webkit version (1.2.6) that is bundled with RHEL 6.5 crashes randomly while evaluating Javascript code. This has been fixed in more recent versions of Webkit which are not available on RHEL 6.5 yet. The workaround is to force Eclipse to use the Mozilla XULRunner based browser. (bug 428347)\r\n\r\nTable content is not rendered when running Eclipse under KDE with GTK+ 3 and \"oxygen-gtk\" theme\r\n\r\nTables in Eclipse are not rendered on Linux distributions with the KDE desktop (such as KUbuntu) when using GTK+ 3 and the corresponding GTK+ 3 desktop theme \"oxygen-gtk\". The workaround is to switch to a different GTK+ 3 theme. (bug 432673)\r\n\r\nEclipse plug-in based on the SWT Browser throws exception\r\n\r\nThe SWT Browser widget uses a platform-specific web browser to render HTML. The org.eclipse.swt.SWTError exception (\"No more handles\") is thrown on platforms that don't meet the requirements for running the Browser widget. Supported platforms and prerequisites are listed on the SWT FAQ item \"Which platforms support the SWT Browser?\".\r\n\r\nOpening File Dialog crashes eclipse (Vista only)\r\n\r\nOn Vista, launching eclipse using -vmargs -Xmx[any size] can crash eclipse when the FileDialog is opened. The workaround is to use the default heap size, i.e. do not use the -Xmx VM args. (bug 188317)\r\n\r\nCrash while editing text (Windows XP with SP2 only)\r\n\r\nSome users who have installed Service Pack 2 on Windows XP have experienced crashes while using editors in Eclipse. The workaround is to place a working version of Windows\\System32\\USP10.DLL in the Eclipse startup directory or uninstall Service Pack 2. (bug 56390)\r\n\r\nEclipse hangs when pasting from an unresponsive application (GTK only)\r\n\r\nIf the application that is supplying the clipboard material is unresponsive, the paste operation hangs Eclipse for several minutes. This situation can be encountered when copying from an Eclipse target workbench, suspending the target workbench at a breakpoint and pasting into the hosting Eclipse workbench. (bug 44915)\r\n\r\nIME conversion problem (Solaris GTK only)\r\n\r\nWhen typing Japanese text, the conversion to Kanji must be done one ideogram at a time. (bug 226636)\r\n\r\nEclipse won't start (Linux GTK PPC only)\r\n\r\nEclipse fails to create a lock file with reason \"No locks available\". To launch eclipse you must disable file locking using the osgi.locking property. For example, you could launch eclipse as follows: \r\neclipse -vmargs -Dosgi.locking=none\r\n\r\nStrings may be truncated or incorrectly wrapped on RHEL5 (Linux GTK only)\r\n\r\nStrings on wrapping Controls may not appear correctly in some locales on RHEL5 as a result of a bug in Pango version 1.14.x. This problem can be fixed by upgrading the installed Pango library to a version that is newer than 1.14.x. (bug 231951)\r\n\r\nBlock Selection functionality provided by StyledText is not BIDI aware\r\n\r\nWhen the orientation of characters under the left and right edges of the block selection rectangle are not the same, the actual selection ranges (in memory) differ from the visual representation of the selection. (bug 277929)\r\n\r\nOlder versions of some Windows screen readers no longer work with Eclipse\r\n\r\nJAWS versions 8 and 9 and Window-Eyes version 6 no longer work well with Eclipse and other SWT applications. Window-Eyes 6 will cause Eclipse to crash, and JAWS 8 and 9 can cause SWT applications to crash. This happens because IAccessible2 support was added to SWT for Eclipse 3.7, but these older screen reader versions contain partial implementations of IAccessible2 that do not follow the current IAccessible2 specification.\r\n\r\nThe workaround for these cases is to specify Java property org.eclipse.swt.accessibility.UseIA2 with value false, which will instruct SWT to not attempt to use IA2 interfaces. An easy way to set this property is to specify VM argument -Dorg.eclipse.swt.accessibility.UseIA2=false when launching Eclipse or your SWT application. (bug 313182)\r\n\r\nDrawing problems when using non-advanced graphics on recent GTK versions\r\n\r\nOn modern Linux distributions with a GTK version greater than 2.18, clipping problems and pixel corruption can occur if the SWT client uses non-advanced GC calls. These problems seem to be caused by low-level bugs in the interactions between GDK and X.\r\n\r\nMenus do not appear in Unity desktop menu bar\r\n\r\nOn recent Ubuntu Linux distributions that feature the Unity desktop, the menus from the workbench will not appear in the top desktop menu bar. They will continue to appear in the shell.\r\n\r\nSlider controls do not draw on Ubuntu\r\n\r\nSliders do not work on Linux distros with overlay scrollbars enabled (such as Ubuntu 12.04). A workaround for this is to disable the overlay scrollbars (export LIBOVERLAY_SCROLLBAR=0 ) before launching Eclipse.\r\n\r\nBIDI Segments in Text controls\r\n\r\nBIDI Segments in Text controls only work on Windows and GTK.\r\n\r\n3.2.7 Platform - Team - CVS\r\n\r\nThe following are known problems with the CVS repository provider only, and do not apply to other repository providers. Additional information on how to use CVS from Eclipse can be found in the Eclipse CVS FAQ.\r\n\r\nCVS server compatibility\r\n\r\nThe CVS plug-in parses messages returned from the CVS server. If the format of these messages is not as expected, some of the plug-in's functionality may be missing. The CVS plug-in is compatible with all stable 1.11.X builds of the CVS server, and should be compatible with future releases in that stream unless text message formats change (the last tested server was 1.11.22). As for the 1.12.X feature releases of CVS, the Eclipse CVS client has been tested with builds up to 1.12.13. However, future releases could easily break the Eclipse CVS client. Basic functionality, such as Checkout, Commit, and Update, should always work, but there may be problems with more advanced commands such as Synchronizing and Browsing the repository.\r\n\r\nConnection cannot be found after initially missing\r\n\r\nIf a connection initially fails due to a network problem, the connection may continue to fail even when the network problem is fixed. In order to establish the connection you must exit and restart Eclipse. (bug 9295)\r\n\r\n\"Received broken pipe signal\" error from server\r\n\r\nEclipse sometimes performs multiple commands within a single connection to the server. This may cause problems with CVS servers that are running server scripts in response to certain commands. (bugs 23575 and 23581)\r\n\r\n\"Terminated with fatal signal 10\" error from server\r\n\r\nThere is a bug in the CVS server related to some compression levels. If you get this error, changing the compression level on the CVS preference page may help. (bug 15724)\r\n\r\n\"Unknown response\" error using ext connection method\r\n\r\nThere are a few situations that can result in an \"Unknown response\" error messages when using the ext connection method. One situation involves using an external communications client (e.g. rsh or ssh) that adds CRs to the communications channel (bug 21180). Another involves Eclipse not properly reading the stderr output of the external communications tool. (bug 11633)\r\n\r\nA disabled CVS capability may not be auto-enabled in existing workspaces\r\n\r\nNew in 3.0 is the ability to disable capabilities and the CVS support in Eclipse can be disabled. However, for backwards compatibility the CVS capability is auto-enabled in existing workspaces that already contain CVS projects. The auto-enabling function may not run if the team support plugin is not loaded at startup. (bug 66977)\r\n\r\nBuilder output files may appear as changed\r\n\r\nWhen folders containing build output are shared they may get improperly marked as dirty when build output is generated.\r\n\r\nEnabling GNOME proxy support\r\n\r\nGNOME applications can make use of proxy settings defined in this environment. If set, Eclipse will use it prior to proxy settings declared using env variables. This feature is disabled by default, to enable it launch Eclipse with \"-Dorg.eclipse.core.net.enableGnome\" switch. That is,\r\n\r\neclipse -Dorg.eclipse.core.net.enableGnome\r\n3.2.8 Platform - Install/Update\r\n\r\nManually installing features and plug-ins on a FAT file system (Windows only)\r\n\r\nWhen features and plug-ins are manually installed on top of an Eclipse-based product install located on a FAT file system that has already been run at least once, the product must be explicitly restarted with -clean. That is,\r\n\r\neclipse.exe -clean\r\nConnecting to untrusted sites using https\r\n\r\nYou cannot install or update software from a site using https whose certificate is not chained to a trusted root certificate in your local certificate store. This typically means the server is using a self-signed certificate, or a certificate authenticated by an unknown third party.\r\n\r\nExtension location is lost if the install path changes\r\n\r\nA previously configured extension location may be temporarily removed if the install is moved or mounted under a different path. This only happens when the link file that configures the extension location uses a relative path that points to a directory under the Eclipse install. On a second startup using the same install path, the extension location is added again (bug 95403). \r\n\r\n3.2.9 Platform - Debug\r\n\r\nNone. (Known problems with the Java debugger appear below in the JDT section.)\r\n\r\n3.2.10 Platform - Compare\r\n\r\nNone.\r\n\r\n3.3 Java development tools (JDT)\r\n\r\nMultiple regions formatting in a given source snippet\r\n\r\nIn version 3.4, the API method org.eclipse.jdt.core.formatter.CodeFormatter.format(int, String, IRegion[], int, String) was added to allow the formatting of several regions in a source snippet with a single pass.\r\nEven if specified, this method does not currently accept comments of the following kinds:\r\norg.eclipse.jdt.core.formatter.CodeFormatter#K_SINGLE_LINE_COMMENT\r\norg.eclipse.jdt.core.formatter.CodeFormatter#K_MULTI_LINE_COMMENT\r\norg.eclipse.jdt.core.formatter.CodeFormatter#K_JAVA_DOC\r\nThis will be fixed in a future release (bug 233967).\r\nSearching for constant field references\r\n\r\nSearch does not find references to constant fields inside binaries because the Java Language Specification mandates that constant field values be inlined in the class file's byte codes, leaving no trace of a field reference. (bug 12044)\r\n\r\nCut, copy, paste not working for linked resources in views showing Java elements\r\n\r\nThe cut, copy, and paste actions do not work for linked files and folders appearing in views that show Java elements, including the Package Explorer. The workaround is to use these actions from the Navigator view instead. (bug 34568)\r\n\r\nJava working sets not working correctly for elements from JRE system library container\r\n\r\nApplying a working set consisting entirely of elements from the JRE System library container as a filter to the packages view might result in an empty Package Explorer. (bug 30442)\r\n\r\nBreakpoints unreliable running Sun 1.6.0_14\r\n\r\nDevelopers debugging applications on Sun's 1.6.0_14 virtual machine should be aware that breakpoints are unreliable (i.e. do not always suspend execution). The problem occurs on Windows and Linux platforms. This is an issue with the VM and not with Eclipse. The workaround is to use the -XX:+UseParallelGC VM option. (bug 279137).\r\nSuspend on uncaught exception overrides exception breakpoint location filters\r\n\r\nException breakpoints can be configured with location filters (inclusive and exclusive). When an unchecked exception is configured to not suspend execution in a specific class, execution will still suspend when the user preference to suspend on uncaught exceptions is on. (bug 66770)\r\n\r\nRunning Java programs with non-Latin-1 characters in package or class names\r\n\r\nYou get a java.lang.NoClassDefFoundError when running Java programs with non-Latin characters in the package or class names. The workaround is to package the class files as a JAR file and run the program out of the JAR and not from the file system directly. (bug 4181)\r\nCannot run or debug class in a project with GB18030 characters in project name\r\n\r\nMost class libraries do not properly support the creation of a system process (via java.lang.Runtime.exec(...)) when the specified command line contains GB18030 characters. This limitation means the debugger cannot launch applications when the command line it generates contains GB18030 characters. (bug 32206)\r\n\r\nCannot detect installed JRE with GB18030 characters in path name\r\n\r\nAutomatic JRE detection fails when the JRE is stored in a directory containing GB18030 characters in its name. (bug 33844)\r\n\r\nCannot generate Javadoc for packages with GB18030 characters in the name\r\n\r\nMost class libraries do not properly support the creation of a system process (via java.lang.Runtime.exec(...)) when the specified command line contains GB18030 characters. Since Javadoc is created using the Javadoc executable provided with the JDK, generating Javadoc fails if the package or class name contains GB18030 characters. (bug 32215)\r\n\r\nUnable to debug stack overflows\r\n\r\nIf a debug session suspends on a java.lang.StackOverflowError exception (due to an exception breakpoint), the debugger may not be able to retrieve any debug information from the target JVM. As well, the debugger may not be able to reliably interact with the target JVM past this point. (bug 19217)\r\n\r\nEvaluation limitation\r\n\r\nThe debugger uses threads in the target JVM to perform evaluations (both explicit evaluations that the user requests, and implicit evaluations such as toString() invocations in the Variables view). The Java Debug Interface (JDI) requires that the thread in which an evaluation is performed be suspended by a user event (that is, a breakpoint or step request). Evaluations cannot be performed on threads suspended by the suspend action. As well, when a breakpoint is configured to suspend the JVM rather than just the individual thread, the threads which did not encounter the breakpoint are not in a valid state to perform an evaluation. When an evaluation is attempted in a thread that is not in a valid state to perform an evaluation, an error message will appear to the effect of \"Thread must be suspended by step or breakpoint to perform method invocation\". (bug 34440)\r\n\r\nMissing debug attributes\r\n\r\nThe debugger requires that class files be compiled with debug attributes if it is to be able to display line numbers and local variables. Quite often, class libraries (for example, \"rt.jar\") are compiled without complete debug attributes, and thus local variables and method arguments for those classes are not visible in the debugger.\r\nUsing Hot Code Replace\r\n\r\nHot code replace is supported on JDK 1.4.x VMs, and IBM J9 VMs. The debugger will attempt to replace all class files that change in the workspace as the user edits and builds source code. However, hot code replace is limited to changes that a particular virtual machine implementation supports. For example, changes within existing methods may be supported, but the addition or removal of members may not be.\r\n\r\nScrapbook\r\n\r\nSetting a breakpoint inside a scrapbook page is not supported.\r\nWhen a snippet is run in the scrapbook which directly or indirectly calls System.exit(int), the evaluation cannot be completed, and will result in a stack trace for a com.sun.jdi.VMDisconnectedException being displayed in the scrapbook editor.\r\n\r\nTerminating a scrapbook page while it is performing an evaluation results in a com.sun.jdi.VMDisconnectedException being displayed in the scrapbook editor.\r\n\r\nDebugging over slow connections\r\n\r\nA global Java debug preference specifies the debugger timeout, which is the maximum amount of time the debugger waits for a response from the target VM after making a request of that VM. Slow connections may require that this value be increased. The timeout value can be edited from the Java > Debug preference page. Changing the timeout value only affects subsequently launched VM, not VMs that are already running.\r\nUpdating of inspected values\r\n\r\nWhen inspecting the result of an evaluated expression in the debugger, it is important to note that the result displayed is the result of that expression at the time it was evaluated. For example, when inspecting a simple integer counter (primitive data type), the value displayed in the Expressions view is the value when the expression was evaluated. As the counter is changed in the running program, the inspected result will not change (since the view is not displaying the value bound to a variable - it is displaying the value of an expression, and the value of a primitive data type cannot change). However, if an expression results in an object, fields of that object will be updated in the inspector as they change in the running program (since the value bound to fields in an object can change).\r\nStepping over native methods that perform I/O\r\n\r\nWhen the debugger steps over native methods that perform I/O to System.out or System.err, the output may not appear immediately unless the native performs a flush on the output buffer.\r\nVM and process termination running on IBM 1.3 JVM on Linux (Linux only)\r\n\r\nTerminating a launch, debug target, or system process associated with a debug target running on the IBM 1.3 JVM on the Linux platform does not work when the associated debug target has a suspended thread. To remove such debug targets from the debug UI, select Terminate and Remove from the debug view's pop-up menu (or use the shortcut \"delete\" key). Associated system processes in the OS may not be properly cleaned up. If a debug target has no suspended threads, termination works properly. (bug 1631)\r\nJava 6 and MacOS\r\n\r\nApple JavaSE-1.6 VMs only execute on 64-bit architectures but JDT will detect 1.6 VMs installed on 32-bit architectures when a new workspace is started or when the user presses the \"Search...\" button on the Installed JREs preference page. Error messages will appear in the log each time JDT attempts to determine which execution environments a 1.6 VM is compatible with. JDT can be configured to ignore 1.6 JREs by removing them from the Installed JREs preference page. (bug 262542)\r\nJava Annotation Processing\r\n\r\nSome methods in the processing API are unimplemented when compiling within the IDE, and will throw UnsupportedOperationException.\r\n\r\nJava 6 annotation processors are supported in the batch compiler and in the IDE. By design, Java 6 processors are only executed during a build, not while editing. (bug 188558)\r\n\r\nJava 5 annotation processors are supported in the IDE only. Java 5 processors can be executed while editing, as well as during a build. Slow annotation processors can cause a slowdown of the editing experience. If this occurs, you may wish to turn off Enable processing in editor on the Java Compiler > Annotation Processing properties page of your Java project.\r\n\r\nJava indexing encounters problems when a folder is used both as a source and a class folder\r\n\r\nJava indexing encounters problems when a folder is used both as a source folder in a project and as a class folder in another project. Hence, when this peculiar setup is used, the Java Search might miss matches located in such a folder. To avoid this kind of problem, it is strongly advised to use different folders for sources and binary classes. (bug 309903)\r\n\r\n3.4 Plug-in Development Environment (PDE)\r\n\r\nFeature manifest editor does not preserve all comments\r\n\r\nWhen a non-source page of the feature manifest editor is used, PDE will convert changes back into XML by regenerating the file. Although the overall content and most of the comments are preserved, some comments may be lost. (bug 59502)\r\n\r\nPDE will not unzip source zips of some plug-ins\r\n\r\nIn the plug-in import wizard, when you choose to import plug-ins as \"projects with source folders\", PDE will not unzip the source for the org.apache.ant. This is because the source ZIPs contains code that will not compile when unzipped as it requires additional JARs that are not part of the SDK. To avoid the creation of plug-in projects that won't compile, PDE will import these plug-ins as binary and attach source, so you would still be able to read the source, you just won't be able to modify it. Also, PDE will not unzip the source for the org.eclipse.swt plug-ins. In this case, it is because, when shipped, the swt code is spread across a plug-in and a fragment, and when unzipped, it will require circular dependencies between the plug-in and fragment projects. These circular dependencies are at minimum marked as warnings by the JDT compiler and may result in unpredictable build behavior. Therefore, PDE always imports org.eclipse.swt as binary with source attached. (bug 66314)\r\n\r\nEmacs key bindings do not work in manifest editor fields\r\n\r\nNon-default key bindings currently do not work in fields on non-source pages of the PDE manifest editors. (bug 19482)\r\n\r\nExport of plug-in may silently drop classes\r\n\r\nWhen exporting a plug-in using the plug-in, feature or product wizards, some classes might be dropped from the resulting archive if their fully qualified name is too long. This typical path limitation can be worked around by creating the jar of the problematic plug-in by using the Jar export wizard. (bug 97150)\r\n\r\nCompilation errors when exporting projects not stored outside of the workspace\r\n\r\nWhen exporting multiple plug-ins and one is stored outside of the workspace, compile errors occurs on export. To work around the problem, you can either export the plug-ins one by one, or change their location. (bug 98579)\r\n\r\nHeadless build needs to be run from a fully qualified path\r\n\r\nWhen running a headless build using the scripts provided by pde build, the properties builder and buildDirectory must refer to a fully qualified path. (bug 139554)\r\n\r\nImporting in Eclipse application fails if plug-in exists in host workspace\r\n\r\nWhen running an Eclipse application (self-hosting) importing plug-ins will not work correctly if the plug-in being imported exists in the host Eclipse's workspace. This is because PDE modifies the target platform of the application to point at the running plug-ins from the host (target weaving). This also affects the PDE test suite. (bug 294005)\r\n\r\nReusing a workspace after changing architectures silently breaks PDE models\r\n\r\nIf a workspace is reused on a machine with a different architecture, the PDE models used to build plug-ins may silently fail. To work around this problem, delete the metadata in <workspace>/.metadata/.plugins/org.eclipse.pde.core. (bug 350172)\r\n\r\nMissing @since tag API Tools problems on interface fields containing @noreference tag\r\n\r\nThe Eclipse platform 4.4 release will not allow the API Tools @noreference tag on interface fields. This was changed because all interface fields are constant fields that cannot support the @noreference restriction. The tag was allowed in previous releases and this usage will now be considered an API change requiring a @since tag. It is recommended that you create an API Tools filter for the missing @since tag problem. This filter can be removed as soon as the API baseline has been regenerated. (bug 402393)\r\n\r\n4. Running Eclipse\r\n\r\nAfter installing the Eclipse SDK in a directory, you can start the Workbench by running the Eclipse executable included with the release (you also need a Java SE 6 JRE, not included with the Eclipse SDK). On Windows, the executable file is called eclipse.exe, and is located in the eclipse sub-directory of the install. If installed at c:\\eclipse-SDK-4.4-win32, the executable is c:\\eclipse-SDK-4.4-win32\\eclipse\\eclipse.exe. Note: Set-up on most other operating environments is analogous. Special instructions for Mac OS X are listed below.\r\n\r\nAllocating enough memory and solving OutOfMemoryErrors\r\n\r\nBy default, Eclipse will allocate up to 512 megabytes of Java heap memory. This should be ample for all typical development tasks. However, depending on the JRE that you are running, the number of additional plug-ins you are using, and the number of files you will be working with, you could conceivably have to increase this amount. Eclipse allows you to pass arguments directly to the Java VM using the -vmargs command line argument, which must follow all other Eclipse specific arguments. Thus, to increase the available heap memory, you would typically use:\r\n\r\neclipse -vmargs -Xmx<memory size>\r\n\r\nwith the <memory size> value set to greater than \"512M\" (512 megabytes -- the default).\r\n\r\nWhen using an Oracle VM below 1.8, you may also need to increase the size of the permanent generation memory. The default maximum is 64 megabytes, but more may be needed depending on your plug-in configuration and use. When the VM runs out of permanent generation memory, it may crash or hang during class loading. This failure is less common when using Oracle JRE version 1.5.0_07 or greater. The maximum permanent generation size is increased using the -XX:MaxPermSize=<memory size> argument:\r\n\r\neclipse -vmargs -XX:MaxPermSize=<memory size>\r\n\r\nThis argument may not be available for all VM versions and platforms; consult your VM documentation for more details.\r\n\r\nNote that setting memory sizes to be larger than the amount of available physical memory on your machine will cause Java to \"thrash\" as it copies objects back and forth to virtual memory, which will severely degrade your performance.\r\n\r\nSelecting a workspace\r\n\r\nWhen the Workbench is launched, the first thing you see is a dialog that allows you to select where the workspace will be located. The workspace is the directory where your work will be stored. If you do not specify otherwise, Eclipse creates the workspace in your user directory. This workspace directory is used as the default content area for your projects as well as for holding any required metadata. For shared or multi-workspace installs you must explicitly specify the location for your workspace using the dialog (or via the \"-data\" command line argument).\r\n\r\nSpecifying the Java virtual machine\r\n\r\nHere is a typical Eclipse command line: \r\n\r\neclipse -vm c:\\jdk6u22\\jre\\bin\\javaw\r\n\r\nTip: It's generally a good idea to explicitly specify which Java VM to use when running Eclipse. This is achieved with the \"-vm\" command line argument as illustrated above. If you don't use \"-vm\", Eclipse will look on the OS path. When you install other Java-based products, they may change your path and could result in a different Java VM being used when you next launch Eclipse.\r\n\r\nTo create a Windows shortcut to an installed Eclipse:\r\n\r\nNavigate to eclipse.exe in Windows Explorer and use Create Shortcut on the content menu.\r\nSelect the shortcut and edit its Properties. In the Target: field append the command line arguments.\r\nOpening this shortcut launches Eclipse. (You can drag the shortcut to the Windows Desktop if you want to keep it in easy reach.)\r\n\r\nMac OS X\r\n\r\nOn Mac OS X, you start Eclipse by double clicking the Eclipse application. If you need to pass arguments to Eclipse, you'll have to edit the eclipse.ini file inside the Eclipse application bundle: select the Eclipse application bundle icon while holding down the Control Key. This will present you with a popup menu. Select \"Show Package Contents\" in the popup menu. Locate eclipse.ini file in the Contents/MacOS sub-folder and open it with your favorite text editor to edit the command line options.\r\n\r\nOn MacOS X you can only launch a UI program more than once if you have separate copies of the program on disk. The reason for this behavior is that every UI application on Mac can open multiple documents, so typically there is no need to open a program twice. Since Eclipse cannot open more than one workspace, this means you have to make a copy of the Eclipse install if you want to open more then one workspace at the same time (bug 139319).\r\n\r\nIf you need to launch Eclipse from the command line, you can use the symbolic link \"eclipse\" in the top-level eclipse folder. It refers to the eclipse executable inside the application bundle and takes the same arguments as \"eclipse.exe\" on other platforms.\r\n\r\nOn Mac OS X 10.4 and later, you may notice a slow down when working with significant numbers of resources if you allow Spotlight to index your workspace. To prevent this, start System Preferences, select the Spotlight icon, then the Privacy tab, then click the Add button (\"+\") and find your workspace directory in the dialog that appears.\r\n\r\nShared Install\r\n\r\nThe startup speed of a shared install can be improved if proper cache information is stored in the shared install area. To achieve this, after unzipping Eclipse distribution, run Eclipse once with the \"-initialize\" option from an account that has a write access to the install directory. See shared installs in Eclipse Help for more information.\r\n\r\n5. Upgrading Workspace from a Previous Release\r\n\r\nUsers who don't use \"-data\"\r\n\r\nIf you weren't previously using \"-data\" to specify your workspace, follow these steps to upgrade:\r\n\r\nFind the workspace directory used by your old version of Eclipse. Typically this is located inside the directory in which Eclipse was installed in a sub-directory called \"workspace\". If you are using a shortcut or script to launch Eclipse, then it will be under the current working directory of that shortcut or script in a sub-directory called \"workspace\". For Windows users, this is specified by the \"Start in:\" argument in your shortcut properties.\r\nCopy this workspace directory to a new, empty location outside of any Eclipse install directory.\r\nInstall the new version of Eclipse in a new location, separate from any old version of Eclipse.\r\nIf you had installed additional features and plug-ins into your old Eclipse, you should re-install them in the new Eclipse.\r\nStart this new version of Eclipse and select this location using the workspace chooser dialog at startup (or use \"-data\" command line argument to pre-select the workspace location).\r\nUsers who do use \"-data\"\r\n\r\nIf you were previously using the \"-data\" argument to start Eclipse, your upgrade path is much easier:\r\n\r\nOptionally copy your workspace directory to a new, empty location outside of any Eclipse install directory as a backup.\r\nInstall the new version of Eclipse in a new location, separate from any old versions of Eclipse.\r\nIf you had installed additional features and plug-ins into your old Eclipse, you should re-install them in the new Eclipse.\r\nStart this new version of Eclipse and select this location using the workspace chooser dialog at startup (or use \"-data\" command line argument to pre-select the workspace location).\r\nNote: Copying your workspace is recommended because, after you've upgraded your workspace, you won't be able to use it again with an older version of Eclipse. If you ever want to go \"back in time\" to an earlier release, you will need that backup.\r\n\r\nUsers who use User Libraries or classpath containers that contain JARs referencing other libraries via Class-Path in the MANIFEST.MF\r\n\r\nIf you want the referenced JAR files to be included in the classpath, you can do one of the following:\r\n\r\nAdd the system property (-DresolveReferencedLibrariesForContainers=true) to the -vmargs list on start-up, or\r\nManually add the referenced JARs to the User Library or to the project.\r\nDropped in bundles may not resolve after upgrade\r\n\r\nIf you have installed bundles by dropping them into the plugins or dropins directory, they might no longer resolve when you upgrade to a new Eclipse Platform version. In each new version of the Eclipse Platform, there are new versions of bundles included in the platform, and often a small number of removed bundles. This may cause your previously dropped in bundles to no longer resolve and run. It is always recommended that you install software via the Help > Install New Software mechanism so you are made aware of any install-time failure to resolve dependencies.\r\n\r\n6. Interoperability with Previous Releases\r\n\r\n6.1 Interoperability of Release 4.4 with previous releases\r\n\r\nSharing projects between heterogeneous Eclipse 4.4 and 4.3\r\n\r\nSpecial care is required when a project in a team repository is being loaded and operated on by developers using Eclipse-based products based on different feature or plug-in versions. The general problem is that the existence, contents, and interpretation of metadata files in the workspaces may be specific to a particular feature or plug-in version, and differ between versions. The workspace compatibility guarantees only cover cases where all developers upgrade their Eclipse workspaces in lock step. In those cases there should be no problem with shared metadata. However, when some developers are working in Eclipse 4.4 while others are working in Eclipse 3.x, there are no such guarantees. This section provides advice for what to do and not to do. It addresses the specific issues with the Eclipse SDK.\r\n\r\nThe typical failure mode is noticed by the 4.4 user. 4.4 metadata is lost when a 4.3 user saves changes and then commits the updated metadata files to the repository. Here's how things typically go awry:\r\n\r\nA user working in Eclipse 4.4 creates or modifies a project in a way that results in changes to a shared metadata file that rely on 4.4-specific information. The user then commits the updated project files, including the shared metadata file, to the shared repository.\r\nAnother user working in Eclipse 4.3 or earlier shares this project from the same repository. The 4.4-specific information in the shared metadata file is not understood by Eclipse 4.3, and is generally discarded or ignored without warning. The user modifies the project in a way that results in changes to the shared metadata file, causing the shared metadata file to be rewritten without any of the 4.4-specific information. The user commits the updated project files, including the shared metadata file, to the shared repository. The user is generally unaware that shared information has just been lost as a result of their actions.\r\nA user working in Eclipse 4.4 picks up the changes to a project from the shared repository, including the updated shared metadata file. The user may be unaware that they have just taken a retrograde step until later when things start to malfunction.\r\nHere are some things to watch out for when sharing projects between Eclipse 4.4 and earlier releases:\r\n\r\nVirtual folders - Eclipse 4.4 supports a notion of virtual folders that did not exist in Eclipse 3.5 or earlier. If such virtual folders are created in 4.4, and the project is subsequently loaded into an Eclipse 3.5 or earlier workspace, these folders will not be recognized. Recommendation: avoid creating virtual folders where project compatibility with Eclipse 3.5 or earlier is required.\r\nResource filters - Eclipse 4.4 supports a notion of resource filters that did not exist in Eclipse 3.5 or earlier. If such filters are added to resources in 4.4, and the project is subsequently loaded into an Eclipse 3.5 or earlier workspace, these filters will not be recognized. Recommendation: avoid creating resource filters where project compatibility with Eclipse 3.5 or earlier is required.\r\nPredefined path variables - Eclipse 4.4 supports a set of built in path variables that can be used as the basis for linked resource locations. Such variables will not be defined automatically in Eclipse 3.5 or earlier. If compatibility with 3.5 or earlier workspace is required, users on 3.5 or earlier workspaces will need to define such path variables manually.\r\nUsing Eclipse 4.4 to develop plug-ins that work in Eclipse 4.3\r\n\r\nIt is also possible (and reasonable) to use Eclipse 4.4 to develop a plug-in intended to work in Eclipse 4.3 or earlier. Use the Plug-in Development > Target Platform preference page to locate non-workspace plug-ins in an Eclipse 4.3 install. This ensures that the code for your plug-in is being compiled and tested against Eclipse 4.3 APIs, extension points, and plug-ins. (The above list of concerns do not apply since they affect the layout and interpretation of files in the plug-in project but none affect the actual deployed form of the plug-in.)\r\n\r\nSun, Solaris, Java and all Java-based trademarks are trademarks of Oracle Corporation. in the United States, other countries, or both.\r\n\r\nIBM is a trademark of International Business Machines Corporation in the United States, other countries, or both.\r\n\r\nMicrosoft, Windows, Windows NT, Vista, and the Windows logo are trademarks of Microsoft Corporation in the United States, other countries, or both.\r\n\r\nApple and Mac OS are trademarks of Apple Computer, Inc., registered in the U.S. and other countries.\r\n\r\nOther company, product, and service names may be trademarks or service marks of others.\r\n\r\n(c) Copyright Eclipse Contributors 2009, 2014\r\n\r\nAppendix 1: Execution Environment by Bundle\r\n\r\nIn the table below, the \"4.4 minimum execution environment\" column indicates the minimum Java class library requirements of each bundle for the 4.4 release, where the value is one of:\r\n\r\nEntry\tMeaning\r\nF1.0\r\nJ2ME Foundation 1.0 - indicates that the bundle can only be run on Foundation 1.0 or greater. Note that with the exception of some MicroEdition IO classes, Foundation 1.0 is a subset of J2SE 1.3.\r\nF1.1\r\nJ2ME Foundation 1.1 - indicates that the bundle can only be run on Foundation 1.1 or greater. Note that with the exception of some MicroEdition IO classes, Foundation 1.1 is a subset of J2SE 1.4.\r\n1.2\r\nJ2SE 1.2 - indicates that the bundle can only be run on JSE 1.2 or greater.\r\n1.3\r\nJ2SE 1.3 - indicates that the bundle can only be run on JSE 1.3 or greater.\r\n1.4\r\nJ2SE 1.4 - indicates that the bundle can only be run on JSE 1.4 or greater.\r\n1.5\r\nJava SE 5 - indicates that the bundle can only be run on Java SE 5 or greater.\r\n1.6\r\nJava SE 6 - indicates that the bundle can only be run on Java SE 6 or greater.\r\n1.7\r\nJava SE 7 - indicates that the bundle can only be run on Java SE 7 or greater.\r\n1.8\r\nJava SE 8 - indicates that the bundle can only be run on Java SE 8 or greater.\r\nn/a\tUnknown at the time of this revision.\r\nTable of minimum execution environments by bundle. (See also the Equinox Project plan for the execution environment requirements of bundles contributed via that project.)\r\n\r\nBundle\t\r\n4.4\r\nminimum\r\nexecution\r\nenvironment\r\n\r\ncom.ibm.icu\t\r\n1.5\r\ncom.jcraft.jsch\t\r\n1.4\r\ncom.sun.el\t\r\n1.5\r\njavax.annotation\t\r\n1.6\r\njavax.el\t\r\n1.5\r\njavax.inject\t\r\n1.5\r\njavax.servlet\t\r\n1.6\r\njavax.servlet.jsp\t\r\n1.6\r\njavax.xml\t\r\n1.2\r\norg.apache.ant\t\r\n1.5\r\norg.apache.batik.css\t\r\n1.3\r\norg.apache.batik.util\t\r\n1.3\r\norg.apache.batik.util.gui\t\r\n1.3\r\norg.apache.commons.codec\t\r\n1.5\r\norg.apache.commons.logging\t\r\nF1.0\r\norg.apache.felix.gogo.command\t\r\nnot specified\r\norg.apache.felix.gogo.runtime\t\r\nnot specified\r\norg.apache.felix.gogo.shell\t\r\nnot specified\r\norg.apache.httpcomponents.httpclient\t\r\n1.5\r\norg.apache.httpcomponents.httpcore\t\r\n1.5\r\norg.apache.jasper.glassfish\t\r\n1.6\r\norg.apache.lucene.analysis\t\r\n1.5\r\norg.apache.lucene.core\t\r\n1.5\r\norg.eclipse.ant.core\t\r\n1.6\r\norg.eclipse.ant.launching\t\r\n1.6\r\norg.eclipse.ant.ui\t\r\n1.6\r\norg.eclipse.compare\t\r\n1.4\r\norg.eclipse.compare.core\t\r\n1.4\r\norg.eclipse.compare.win32\t\r\n1.4\r\norg.eclipse.core.commands\t\r\nF1.0\r\norg.eclipse.core.contenttype\t\r\nF1.0\r\norg.eclipse.core.databinding\t\r\nF1.1\r\norg.eclipse.core.databinding.beans\t\r\n1.4\r\norg.eclipse.core.databinding.observable\t\r\nF1.1\r\norg.eclipse.core.databinding.property\t\r\nF1.1\r\norg.eclipse.core.expressions\t\r\nF1.0\r\norg.eclipse.core.externaltools\t\r\n1.6\r\norg.eclipse.core.filebuffers\t\r\n1.4\r\norg.eclipse.core.filesystem\t\r\n1.4\r\norg.eclipse.core.filesystem.java7\t\r\n1.7\r\norg.eclipse.core.jobs\t\r\n1.6\r\norg.eclipse.core.net\t\r\nF1.1\r\norg.eclipse.core.resources\t\r\n1.5\r\norg.eclipse.core.runtime\t\r\n1.5\r\norg.eclipse.core.runtime.compatibility\t\r\nF1.0\r\norg.eclipse.core.runtime.compatibility.registry\t\r\nF1.0\r\norg.eclipse.core.variables\t\r\n1.6\r\norg.eclipse.cvs\t\r\nnot specified\r\norg.eclipse.debug.core\t\r\n1.6\r\norg.eclipse.debug.ui\t\r\n1.6\r\norg.eclipse.e4.core.commands\t\r\n1.6\r\norg.eclipse.e4.core.contexts\t\r\n1.6\r\norg.eclipse.e4.core.di\t\r\n1.6\r\norg.eclipse.e4.core.di.extensions\t\r\n1.6\r\norg.eclipse.e4.core.services\t\r\n1.6\r\norg.eclipse.e4.ui.bindings\t\r\n1.6\r\norg.eclipse.e4.ui.css.core\t\r\n1.6\r\norg.eclipse.e4.ui.css.swt\t\r\n1.6\r\norg.eclipse.e4.ui.css.swt.theme\t\r\n1.6\r\norg.eclipse.e4.ui.di\t\r\n1.6\r\norg.eclipse.e4.ui.model.workbench\t\r\n1.5\r\norg.eclipse.e4.ui.services\t\r\n1.6\r\norg.eclipse.e4.ui.widgets\t\r\n1.6\r\norg.eclipse.e4.ui.workbench\t\r\n1.6\r\norg.eclipse.e4.ui.workbench.addons.swt\t\r\n1.6\r\norg.eclipse.e4.ui.workbench.renderers.swt\t\r\n1.6\r\norg.eclipse.e4.ui.workbench.swt\t\r\n1.6\r\norg.eclipse.e4.ui.workbench3\t\r\n1.6\r\norg.eclipse.emf.common\t\r\n1.5\r\norg.eclipse.emf.ecore\t\r\n1.5\r\norg.eclipse.emf.ecore.change\t\r\n1.5\r\norg.eclipse.emf.ecore.xmi\t\r\n1.5\r\norg.eclipse.help\t\r\nF1.0\r\norg.eclipse.help.base\t\r\n1.5\r\norg.eclipse.help.ui\t\r\n1.4\r\norg.eclipse.help.webapp\t\r\n1.4\r\norg.eclipse.jdt\t\r\nnot specified\r\norg.eclipse.jdt.annotation\t\r\n1.8\r\norg.eclipse.jdt.apt.core\t\r\n1.5\r\norg.eclipse.jdt.apt.pluggable.core\t\r\n1.6\r\norg.eclipse.jdt.apt.ui\t\r\n1.5\r\norg.eclipse.jdt.compiler.apt\t\r\n1.6\r\norg.eclipse.jdt.compiler.tool\t\r\n1.6\r\norg.eclipse.jdt.core\t\r\n1.6\r\norg.eclipse.jdt.core.manipulation\t\r\n1.4\r\norg.eclipse.jdt.debug\t\r\n1.5\r\norg.eclipse.jdt.debug.ui\t\r\n1.5\r\norg.eclipse.jdt.doc.isv\t\r\nnot specified\r\norg.eclipse.jdt.doc.user\t\r\nnot specified\r\norg.eclipse.jdt.junit\t\r\n1.5\r\norg.eclipse.jdt.junit.core\t\r\n1.4\r\norg.eclipse.jdt.junit.runtime\t\r\n1.4\r\norg.eclipse.jdt.junit4.runtime\t\r\n1.5\r\norg.eclipse.jdt.launching\t\r\n1.5\r\norg.eclipse.jdt.ui\t\r\n1.5\r\norg.eclipse.jface\t\r\n1.6\r\norg.eclipse.jface.databinding\t\r\nF1.0\r\norg.eclipse.jface.text\t\r\n1.4\r\norg.eclipse.jsch.core\t\r\n1.4\r\norg.eclipse.jsch.ui\t\r\n1.4\r\norg.eclipse.ltk.core.refactoring\t\r\n1.4\r\norg.eclipse.ltk.ui.refactoring\t\r\n1.4\r\norg.eclipse.pde\t\r\n1.4\r\norg.eclipse.pde.api.tools\t\r\n1.6\r\norg.eclipse.pde.api.tools.annotations\t\r\n1.5\r\norg.eclipse.pde.api.tools.ui\t\r\n1.6\r\norg.eclipse.pde.build\t\r\n1.6\r\norg.eclipse.pde.core\t\r\n1.6\r\norg.eclipse.pde.doc.user\t\r\nnot specified\r\norg.eclipse.pde.ds.core\t\r\n1.4\r\norg.eclipse.pde.ds.ui\t\r\n1.4\r\norg.eclipse.pde.junit.runtime\t\r\n1.4\r\norg.eclipse.pde.launching\t\r\n1.6\r\norg.eclipse.pde.runtime\t\r\n1.4\r\norg.eclipse.pde.ua.core\t\r\n1.4\r\norg.eclipse.pde.ua.ui\t\r\n1.4\r\norg.eclipse.pde.ui\t\r\n1.6\r\norg.eclipse.pde.ui.templates\t\r\n1.4\r\norg.eclipse.platform\t\r\nF1.0\r\norg.eclipse.platform.doc.isv\t\r\nnot specified\r\norg.eclipse.platform.doc.user\t\r\nnot specified\r\norg.eclipse.rcp\t\r\nnot specified\r\norg.eclipse.sdk\t\r\nnot specified\r\norg.eclipse.search\t\r\n1.4\r\norg.eclipse.swt\t\r\n1.5\r\norg.eclipse.team.core\t\r\n1.4\r\norg.eclipse.team.cvs.core\t\r\n1.4\r\norg.eclipse.team.cvs.ssh2\t\r\n1.4\r\norg.eclipse.team.cvs.ui\t\r\n1.4\r\norg.eclipse.team.ui\t\r\n1.4\r\norg.eclipse.text\t\r\n1.4\r\norg.eclipse.ui\t\r\nF1.0\r\norg.eclipse.ui.browser\t\r\n1.5\r\norg.eclipse.ui.cheatsheets\t\r\n1.4\r\norg.eclipse.ui.console\t\r\n1.6\r\norg.eclipse.ui.editors\t\r\n1.4\r\norg.eclipse.ui.externaltools\t\r\n1.6\r\norg.eclipse.ui.forms\t\r\n1.4\r\norg.eclipse.ui.ide\t\r\n1.6\r\norg.eclipse.ui.ide.application\t\r\n1.4\r\norg.eclipse.ui.intro\t\r\n1.4\r\norg.eclipse.ui.intro.universal\t\r\n1.4\r\norg.eclipse.ui.navigator\t\r\n1.4\r\norg.eclipse.ui.navigator.resources\t\r\n1.6\r\norg.eclipse.ui.net\t\r\nF1.1\r\norg.eclipse.ui.themes\t\r\n1.6\r\norg.eclipse.ui.trace\t\r\n1.5\r\norg.eclipse.ui.views\t\r\n1.4\r\norg.eclipse.ui.views.log\t\r\n1.4\r\norg.eclipse.ui.views.properties.tabbed\t\r\nF1.0\r\norg.eclipse.ui.win32\t\r\n1.4\r\norg.eclipse.ui.workbench\t\r\n1.6\r\norg.eclipse.ui.workbench.texteditor\t\r\n1.4\r\norg.eclipse.update.configurator\t\r\nF1.0\r\norg.hamcrest.core\t\r\n1.5\r\norg.junit\t\r\n1.5\r\norg.objectweb.asm\t\r\n1.5\r\norg.objectweb.asm.tree\t\r\n1.5\r\norg.sat4j.core\t\r\n1.5\r\norg.sat4j.pb\t\r\n1.5\r\norg.w3c.css.sac\t\r\nF1.0\r\norg.w3c.dom.events\t\r\n1.3\r\norg.w3c.dom.smil\t\r\nF1.0\r\norg.w3c.dom.svg\t\r\nF1.0\r\n","google":"UA-55802128-1","note":"Don't delete this file! It's used internally to help with page regeneration."}